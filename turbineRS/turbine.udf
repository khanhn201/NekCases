//
// nekRS User Defined File
//
#include "udf.hpp"

static dfloat P_OMEGA;

#ifdef __okl__

// Boundary conditions
void codedFixedValueVelocity(bcData *bc)
{
  if (bc->id == 5) {// Int Boundaries
      bc->u = bc->uinterp - p_omega * bc->y;
      bc->v = bc->vinterp + p_omega * bc->x;
      bc->w = bc->winterp;
  }
  if (bc->id == 3) {// v Boundaries
      bc->u = 0.0;
      bc->v = 0.0;
      bc->w = -1.0;
  }
  if (bc->id == 1) {// mv Boundaries
      bc->u = p_omega * bc->y;
      bc->v = -p_omega * bc->x;
      bc->w = 0.0;
  }
}

@kernel void userMeshVelocity(const dlong Ntotal,
                              const dlong offset,
                              @ restrict const dfloat *x,
                              @ restrict const dfloat *y,
                              @ restrict const dfloat *z,
                              @ restrict dfloat *W)
{
  for (dlong n = 0; n < Ntotal; ++n; @tile(p_blockSize, @outer, @inner)) {
    W[n + 0 * offset] = p_omega * y[n];
    W[n + 1 * offset] = -p_omega * x[n];
    W[n + 2 * offset] = 0.0;
  }
}

#endif

void UDF_LoadKernels(deviceKernelProperties& kernelInfo)
{
  kernelInfo.define("p_omega") = P_OMEGA;
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  platform->par->extract("casedata", "p_omega", P_OMEGA);
}

void userq(double time)
{

}

void UDF_Setup()
{
}

void UDF_ExecuteStep(double time, int tstep)
{
  auto *mesh = nrs->meshV;
  userMeshVelocity(mesh->Nlocal, nrs->fieldOffset, mesh->o_x, mesh->o_y, mesh->o_z, mesh->o_U);
  
  /*if (nrs->checkpointStep) {*/
  /*  nrs->copyToNek(time, tstep);*/
  /*  nek::userchk();*/
  /*}*/
}
